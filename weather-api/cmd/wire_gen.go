// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/rhbarauna/goexpert-desafio-cloud-run/configs"
	"github.com/rhbarauna/goexpert-desafio-cloud-run/internal/infra/place"
	"github.com/rhbarauna/goexpert-desafio-cloud-run/internal/infra/place/viacep"
	"github.com/rhbarauna/goexpert-desafio-cloud-run/internal/infra/weather"
	"github.com/rhbarauna/goexpert-desafio-cloud-run/internal/infra/weather/weatherapi"
	"github.com/rhbarauna/goexpert-desafio-cloud-run/internal/usecase"
	"github.com/rhbarauna/goexpert-desafio-cloud-run/internal/web/handler"
	"path/filepath"
	"runtime"
)

// Injectors from wire.go:

func provideGetPlaceForecastUC() usecase.GetPlaceForecast {
	viaCep := viacep.NewViaCep()
	config := provideConfig()
	weatherApi := weatherapi.NewWeatherAPI(config)
	getPlaceForecast := usecase.NewGetPlaceForecastUseCase(viaCep, weatherApi)
	return getPlaceForecast
}

func NewGetPlaceTemperaturesHandler() handler.GetPlaceTemperaturesHandler {
	getPlaceForecast := provideGetPlaceForecastUC()
	getPlaceTemperaturesHandler := handler.NewGetPlaceTemperaturesHandler(getPlaceForecast)
	return getPlaceTemperaturesHandler
}

// wire.go:

func provideConfig() *configs.Config {
	_, currentFile, _, ok := runtime.Caller(0)
	if !ok {
		panic("Erro ao obter informações do arquivo.")
	}
	goDir := filepath.Dir(currentFile)

	config, err := configs.LoadConfig(goDir)
	if err != nil {
		panic(err)
	}
	return config
}

var setPlaceProviderInterface = wire.NewSet(viacep.NewViaCep, wire.Bind(new(place.PlaceProviderInterface), new(*viacep.ViaCep)))

var setWeatherProviderInterface = wire.NewSet(
	provideConfig, weatherapi.NewWeatherAPI, wire.Bind(new(weather.WeatherProviderInterface), new(*weatherapi.WeatherApi)),
)
