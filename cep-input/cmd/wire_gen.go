// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
	"pos-graduacao/desafios/observabilidade/input/internal/infra/forecast"
	"pos-graduacao/desafios/observabilidade/input/internal/infra/forecast/weather"
	"pos-graduacao/desafios/observabilidade/input/internal/infra/tracing"
	"pos-graduacao/desafios/observabilidade/input/internal/usecase"
	"pos-graduacao/desafios/observabilidade/input/internal/web/handler"
)

// Injectors from wire.go:

func provideGetForecastUC() usecase.GetForecast {
	tracer := NewAppTracer()
	weatherApi := weather.NewWeatherApi(tracer)
	getForecast := usecase.NewGetForecastUseCase(weatherApi, tracer)
	return getForecast
}

func NewCepForecastHandler() handler.GetCepForecastHandler {
	getForecast := provideGetForecastUC()
	getCepForecastHandler := handler.NewCepForecastHandler(getForecast)
	return getCepForecastHandler
}

// wire.go:

func NewAppTracer() trace.Tracer {
	return otel.Tracer("cep-input")
}

func NewTracing(url, serviceName string) func() {
	return tracing.InitializeTracer(url, serviceName)
}

var setTraceProvider = wire.NewSet(NewAppTracer)

var setForecastProviderInterface = wire.NewSet(weather.NewWeatherApi, wire.Bind(new(forecast.ForecastProviderInterface), new(*weather.WeatherApi)))
